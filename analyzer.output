Terminals unused in grammar

    _AND
    _FOR
    _IN
    _OR


Grammar

    0 $accept: file $end

    1 file: ε
    2     | statement_list
    3     | _NEW_LINE statement_list

    4 statement_list: statement
    5               | statement_list statement

    6 statement: simple_statement _NEW_LINE
    7          | compound_statement

    8 simple_statement: assign_statement
    9                 | multi_assign_statement
   10                 | return_statement
   11                 | function_call
   12                 | _BREAK
   13                 | _CONTINUE
   14                 | _PASS

   15 compound_statement: function_def
   16                   | if_statement
   17                   | while_statement
   18                   | try_except_statement

   19 assign_statement: _ID _ASSIGN num_exp

   20 $@1: ε

   21 multi_assign_statement: multi_assign_vars $@1 multi_assign_values

   22 multi_assign_vars: _ID _COMMA _ID
   23                  | multi_assign_vars _COMMA _ID

   24 multi_assign_values: _ASSIGN num_exp _COMMA num_exp
   25                    | multi_assign_values _COMMA num_exp

   26 return_statement: _RETURN
   27                 | _RETURN num_exp

   28 function_call: _ID _LPAREN arguments _RPAREN

   29 arguments: ε
   30          | arguments args

   31 args: num_exp
   32     | _COMMA num_exp

   33 $@2: ε

   34 $@3: ε

   35 function_def: _DEF _ID $@2 _LPAREN parameters _RPAREN _COLON _NEW_LINE $@3 body

   36 parameters: ε
   37           | _ID
   38           | param_with_default_val
   39           | parameters _COMMA _ID
   40           | parameters _COMMA param_with_default_val

   41 param_with_default_val: _ID _ASSIGN num_exp

   42 if_statement: if_part elif_part else_part

   43 $@4: ε

   44 @5: ε

   45 if_part: _IF $@4 num_exp _COLON _NEW_LINE @5 body

   46 elif_part: ε

   47 @6: ε

   48 elif_part: elif_part _ELIF num_exp _COLON _NEW_LINE @6 body

   49 $@7: ε

   50 while_statement: while_part $@7 else_part

   51 @8: ε

   52 @9: ε

   53 while_part: _WHILE @8 num_exp _COLON _NEW_LINE @9 body

   54 try_except_statement: try_part except_part finally_or_else_part

   55 @10: ε

   56 try_part: _TRY _COLON _NEW_LINE @10 body

   57 except_part: ε

   58 $@11: ε

   59 except_part: except_part _EXCEPT _ID $@11 except_finally_body
   60            | except_part _EXCEPT except_finally_body

   61 @12: ε

   62 except_finally_body: _COLON _NEW_LINE @12 body

   63 finally_or_else_part: ε
   64                     | _FINALLY except_finally_body
   65                     | _ELSE except_finally_body

   66 else_part: ε

   67 @13: ε

   68 else_part: _ELSE _COLON _NEW_LINE @13 body

   69 $@14: ε

   70 body: _INDENT $@14 statement_list _DEDENT

   71 num_exp: exp
   72        | _NOT num_exp
   73        | num_exp _ADD_SUB_OP num_exp
   74        | num_exp _MUL_DIV_OP num_exp
   75        | num_exp _LOP num_exp
   76        | num_exp _RELOP num_exp

   77 exp: literal
   78    | _ID
   79    | function_call
   80    | _LPAREN num_exp _RPAREN

   81 literal: _NUM_BOOL
   82        | _STRING
   83        | _NONE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _NEW_LINE (258) 3 6 35 45 48 53 56 62 68
    _INDENT (259) 70
    _DEDENT (260) 70
    _AND (261)
    _BREAK (262) 12
    _CONTINUE (263) 13
    _DEF (264) 35
    _ELIF (265) 48
    _ELSE (266) 65 68
    _EXCEPT (267) 59 60
    _FINALLY (268) 64
    _FOR (269)
    _IF (270) 45
    _IN (271)
    _NOT (272) 72
    _OR (273)
    _PASS (274) 14
    _RETURN (275) 26 27
    _TRY (276) 56
    _WHILE (277) 53
    _COMMA (278) 22 23 24 25 32 39 40
    _COLON (279) 35 45 48 53 56 62 68
    _LPAREN (280) 28 35 80
    _RPAREN (281) 28 35 80
    _ASSIGN (282) 19 24 41
    _ADD_SUB_OP <i> (283) 73
    _MUL_DIV_OP <i> (284) 74
    _LOP <i> (285) 75
    _RELOP <i> (286) 76
    _ID <s> (287) 19 22 23 28 35 37 39 41 59 78
    _NUM_BOOL <s> (288) 81
    _STRING <s> (289) 82
    _NONE <s> (290) 83
    VAR_ID (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    file (38)
        on left: 1 2 3
        on right: 0
    statement_list (39)
        on left: 4 5
        on right: 2 3 5 70
    statement (40)
        on left: 6 7
        on right: 4 5
    simple_statement (41)
        on left: 8 9 10 11 12 13 14
        on right: 6
    compound_statement (42)
        on left: 15 16 17 18
        on right: 7
    assign_statement (43)
        on left: 19
        on right: 8
    multi_assign_statement (44)
        on left: 21
        on right: 9
    $@1 (45)
        on left: 20
        on right: 21
    multi_assign_vars (46)
        on left: 22 23
        on right: 21 23
    multi_assign_values (47)
        on left: 24 25
        on right: 21 25
    return_statement (48)
        on left: 26 27
        on right: 10
    function_call <i> (49)
        on left: 28
        on right: 11 79
    arguments (50)
        on left: 29 30
        on right: 28 30
    args (51)
        on left: 31 32
        on right: 30
    function_def (52)
        on left: 35
        on right: 15
    $@2 (53)
        on left: 33
        on right: 35
    $@3 (54)
        on left: 34
        on right: 35
    parameters (55)
        on left: 36 37 38 39 40
        on right: 35 39 40
    param_with_default_val (56)
        on left: 41
        on right: 38 40
    if_statement (57)
        on left: 42
        on right: 16
    if_part (58)
        on left: 45
        on right: 42
    $@4 (59)
        on left: 43
        on right: 45
    @5 (60)
        on left: 44
        on right: 45
    elif_part (61)
        on left: 46 48
        on right: 42 48
    @6 (62)
        on left: 47
        on right: 48
    while_statement (63)
        on left: 50
        on right: 17
    $@7 (64)
        on left: 49
        on right: 50
    while_part <i> (65)
        on left: 53
        on right: 50
    @8 (66)
        on left: 51
        on right: 53
    @9 (67)
        on left: 52
        on right: 53
    try_except_statement (68)
        on left: 54
        on right: 18
    try_part (69)
        on left: 56
        on right: 54
    @10 (70)
        on left: 55
        on right: 56
    except_part (71)
        on left: 57 59 60
        on right: 54 59 60
    $@11 (72)
        on left: 58
        on right: 59
    except_finally_body (73)
        on left: 62
        on right: 59 60 64 65
    @12 (74)
        on left: 61
        on right: 62
    finally_or_else_part (75)
        on left: 63 64 65
        on right: 54
    else_part (76)
        on left: 66 68
        on right: 42 50
    @13 (77)
        on left: 67
        on right: 68
    body (78)
        on left: 70
        on right: 35 45 48 53 56 62 68
    $@14 (79)
        on left: 69
        on right: 70
    num_exp <i> (80)
        on left: 71 72 73 74 75 76
        on right: 19 24 25 27 31 32 41 45 48 53 72 73 74 75 76 80
    exp <i> (81)
        on left: 77 78 79 80
        on right: 71
    literal <i> (82)
        on left: 81 82 83
        on right: 77


State 0

    0 $accept: • file $end

    _NEW_LINE  shift, and go to state 1
    _BREAK     shift, and go to state 2
    _CONTINUE  shift, and go to state 3
    _DEF       shift, and go to state 4
    _IF        shift, and go to state 5
    _PASS      shift, and go to state 6
    _RETURN    shift, and go to state 7
    _TRY       shift, and go to state 8
    _WHILE     shift, and go to state 9
    _ID        shift, and go to state 10

    $default  reduce using rule 1 (file)

    file                    go to state 11
    statement_list          go to state 12
    statement               go to state 13
    simple_statement        go to state 14
    compound_statement      go to state 15
    assign_statement        go to state 16
    multi_assign_statement  go to state 17
    multi_assign_vars       go to state 18
    return_statement        go to state 19
    function_call           go to state 20
    function_def            go to state 21
    if_statement            go to state 22
    if_part                 go to state 23
    while_statement         go to state 24
    while_part              go to state 25
    try_except_statement    go to state 26
    try_part                go to state 27


State 1

    3 file: _NEW_LINE • statement_list

    _BREAK     shift, and go to state 2
    _CONTINUE  shift, and go to state 3
    _DEF       shift, and go to state 4
    _IF        shift, and go to state 5
    _PASS      shift, and go to state 6
    _RETURN    shift, and go to state 7
    _TRY       shift, and go to state 8
    _WHILE     shift, and go to state 9
    _ID        shift, and go to state 10

    statement_list          go to state 28
    statement               go to state 13
    simple_statement        go to state 14
    compound_statement      go to state 15
    assign_statement        go to state 16
    multi_assign_statement  go to state 17
    multi_assign_vars       go to state 18
    return_statement        go to state 19
    function_call           go to state 20
    function_def            go to state 21
    if_statement            go to state 22
    if_part                 go to state 23
    while_statement         go to state 24
    while_part              go to state 25
    try_except_statement    go to state 26
    try_part                go to state 27


State 2

   12 simple_statement: _BREAK •

    $default  reduce using rule 12 (simple_statement)


State 3

   13 simple_statement: _CONTINUE •

    $default  reduce using rule 13 (simple_statement)


State 4

   35 function_def: _DEF • _ID $@2 _LPAREN parameters _RPAREN _COLON _NEW_LINE $@3 body

    _ID  shift, and go to state 29


State 5

   45 if_part: _IF • $@4 num_exp _COLON _NEW_LINE @5 body

    $default  reduce using rule 43 ($@4)

    $@4  go to state 30


State 6

   14 simple_statement: _PASS •

    $default  reduce using rule 14 (simple_statement)


State 7

   26 return_statement: _RETURN •
   27                 | _RETURN • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    $default  reduce using rule 26 (return_statement)

    function_call  go to state 37
    num_exp        go to state 38
    exp            go to state 39
    literal        go to state 40


State 8

   56 try_part: _TRY • _COLON _NEW_LINE @10 body

    _COLON  shift, and go to state 41


State 9

   53 while_part: _WHILE • @8 num_exp _COLON _NEW_LINE @9 body

    $default  reduce using rule 51 (@8)

    @8  go to state 42


State 10

   19 assign_statement: _ID • _ASSIGN num_exp
   22 multi_assign_vars: _ID • _COMMA _ID
   28 function_call: _ID • _LPAREN arguments _RPAREN

    _COMMA   shift, and go to state 43
    _LPAREN  shift, and go to state 44
    _ASSIGN  shift, and go to state 45


State 11

    0 $accept: file • $end

    $end  shift, and go to state 46


State 12

    2 file: statement_list •
    5 statement_list: statement_list • statement

    _BREAK     shift, and go to state 2
    _CONTINUE  shift, and go to state 3
    _DEF       shift, and go to state 4
    _IF        shift, and go to state 5
    _PASS      shift, and go to state 6
    _RETURN    shift, and go to state 7
    _TRY       shift, and go to state 8
    _WHILE     shift, and go to state 9
    _ID        shift, and go to state 10

    $default  reduce using rule 2 (file)

    statement               go to state 47
    simple_statement        go to state 14
    compound_statement      go to state 15
    assign_statement        go to state 16
    multi_assign_statement  go to state 17
    multi_assign_vars       go to state 18
    return_statement        go to state 19
    function_call           go to state 20
    function_def            go to state 21
    if_statement            go to state 22
    if_part                 go to state 23
    while_statement         go to state 24
    while_part              go to state 25
    try_except_statement    go to state 26
    try_part                go to state 27


State 13

    4 statement_list: statement •

    $default  reduce using rule 4 (statement_list)


State 14

    6 statement: simple_statement • _NEW_LINE

    _NEW_LINE  shift, and go to state 48


State 15

    7 statement: compound_statement •

    $default  reduce using rule 7 (statement)


State 16

    8 simple_statement: assign_statement •

    $default  reduce using rule 8 (simple_statement)


State 17

    9 simple_statement: multi_assign_statement •

    $default  reduce using rule 9 (simple_statement)


State 18

   21 multi_assign_statement: multi_assign_vars • $@1 multi_assign_values
   23 multi_assign_vars: multi_assign_vars • _COMMA _ID

    _COMMA  shift, and go to state 49

    $default  reduce using rule 20 ($@1)

    $@1  go to state 50


State 19

   10 simple_statement: return_statement •

    $default  reduce using rule 10 (simple_statement)


State 20

   11 simple_statement: function_call •

    $default  reduce using rule 11 (simple_statement)


State 21

   15 compound_statement: function_def •

    $default  reduce using rule 15 (compound_statement)


State 22

   16 compound_statement: if_statement •

    $default  reduce using rule 16 (compound_statement)


State 23

   42 if_statement: if_part • elif_part else_part

    $default  reduce using rule 46 (elif_part)

    elif_part  go to state 51


State 24

   17 compound_statement: while_statement •

    $default  reduce using rule 17 (compound_statement)


State 25

   50 while_statement: while_part • $@7 else_part

    $default  reduce using rule 49 ($@7)

    $@7  go to state 52


State 26

   18 compound_statement: try_except_statement •

    $default  reduce using rule 18 (compound_statement)


State 27

   54 try_except_statement: try_part • except_part finally_or_else_part

    $default  reduce using rule 57 (except_part)

    except_part  go to state 53


State 28

    3 file: _NEW_LINE statement_list •
    5 statement_list: statement_list • statement

    _BREAK     shift, and go to state 2
    _CONTINUE  shift, and go to state 3
    _DEF       shift, and go to state 4
    _IF        shift, and go to state 5
    _PASS      shift, and go to state 6
    _RETURN    shift, and go to state 7
    _TRY       shift, and go to state 8
    _WHILE     shift, and go to state 9
    _ID        shift, and go to state 10

    $default  reduce using rule 3 (file)

    statement               go to state 47
    simple_statement        go to state 14
    compound_statement      go to state 15
    assign_statement        go to state 16
    multi_assign_statement  go to state 17
    multi_assign_vars       go to state 18
    return_statement        go to state 19
    function_call           go to state 20
    function_def            go to state 21
    if_statement            go to state 22
    if_part                 go to state 23
    while_statement         go to state 24
    while_part              go to state 25
    try_except_statement    go to state 26
    try_part                go to state 27


State 29

   35 function_def: _DEF _ID • $@2 _LPAREN parameters _RPAREN _COLON _NEW_LINE $@3 body

    $default  reduce using rule 33 ($@2)

    $@2  go to state 54


State 30

   45 if_part: _IF $@4 • num_exp _COLON _NEW_LINE @5 body

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 55
    exp            go to state 39
    literal        go to state 40


State 31

   72 num_exp: _NOT • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 56
    exp            go to state 39
    literal        go to state 40


State 32

   80 exp: _LPAREN • num_exp _RPAREN

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 57
    exp            go to state 39
    literal        go to state 40


State 33

   28 function_call: _ID • _LPAREN arguments _RPAREN
   78 exp: _ID •

    _LPAREN  shift, and go to state 44

    $default  reduce using rule 78 (exp)


State 34

   81 literal: _NUM_BOOL •

    $default  reduce using rule 81 (literal)


State 35

   82 literal: _STRING •

    $default  reduce using rule 82 (literal)


State 36

   83 literal: _NONE •

    $default  reduce using rule 83 (literal)


State 37

   79 exp: function_call •

    $default  reduce using rule 79 (exp)


State 38

   27 return_statement: _RETURN num_exp •
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61

    $default  reduce using rule 27 (return_statement)


State 39

   71 num_exp: exp •

    $default  reduce using rule 71 (num_exp)


State 40

   77 exp: literal •

    $default  reduce using rule 77 (exp)


State 41

   56 try_part: _TRY _COLON • _NEW_LINE @10 body

    _NEW_LINE  shift, and go to state 62


State 42

   53 while_part: _WHILE @8 • num_exp _COLON _NEW_LINE @9 body

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 63
    exp            go to state 39
    literal        go to state 40


State 43

   22 multi_assign_vars: _ID _COMMA • _ID

    _ID  shift, and go to state 64


State 44

   28 function_call: _ID _LPAREN • arguments _RPAREN

    $default  reduce using rule 29 (arguments)

    arguments  go to state 65


State 45

   19 assign_statement: _ID _ASSIGN • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 66
    exp            go to state 39
    literal        go to state 40


State 46

    0 $accept: file $end •

    $default  accept


State 47

    5 statement_list: statement_list statement •

    $default  reduce using rule 5 (statement_list)


State 48

    6 statement: simple_statement _NEW_LINE •

    $default  reduce using rule 6 (statement)


State 49

   23 multi_assign_vars: multi_assign_vars _COMMA • _ID

    _ID  shift, and go to state 67


State 50

   21 multi_assign_statement: multi_assign_vars $@1 • multi_assign_values

    _ASSIGN  shift, and go to state 68

    multi_assign_values  go to state 69


State 51

   42 if_statement: if_part elif_part • else_part
   48 elif_part: elif_part • _ELIF num_exp _COLON _NEW_LINE @6 body

    _ELIF  shift, and go to state 70
    _ELSE  shift, and go to state 71

    $default  reduce using rule 66 (else_part)

    else_part  go to state 72


State 52

   50 while_statement: while_part $@7 • else_part

    _ELSE  shift, and go to state 71

    $default  reduce using rule 66 (else_part)

    else_part  go to state 73


State 53

   54 try_except_statement: try_part except_part • finally_or_else_part
   59 except_part: except_part • _EXCEPT _ID $@11 except_finally_body
   60            | except_part • _EXCEPT except_finally_body

    _ELSE     shift, and go to state 74
    _EXCEPT   shift, and go to state 75
    _FINALLY  shift, and go to state 76

    $default  reduce using rule 63 (finally_or_else_part)

    finally_or_else_part  go to state 77


State 54

   35 function_def: _DEF _ID $@2 • _LPAREN parameters _RPAREN _COLON _NEW_LINE $@3 body

    _LPAREN  shift, and go to state 78


State 55

   45 if_part: _IF $@4 num_exp • _COLON _NEW_LINE @5 body
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _COLON       shift, and go to state 79
    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61


State 56

   72 num_exp: _NOT num_exp •
   73        | num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _RELOP       shift, and go to state 61

    $default  reduce using rule 72 (num_exp)


State 57

   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp
   80 exp: _LPAREN num_exp • _RPAREN

    _RPAREN      shift, and go to state 80
    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61


State 58

   73 num_exp: num_exp _ADD_SUB_OP • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 81
    exp            go to state 39
    literal        go to state 40


State 59

   74 num_exp: num_exp _MUL_DIV_OP • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 82
    exp            go to state 39
    literal        go to state 40


State 60

   75 num_exp: num_exp _LOP • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 83
    exp            go to state 39
    literal        go to state 40


State 61

   76 num_exp: num_exp _RELOP • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 84
    exp            go to state 39
    literal        go to state 40


State 62

   56 try_part: _TRY _COLON _NEW_LINE • @10 body

    $default  reduce using rule 55 (@10)

    @10  go to state 85


State 63

   53 while_part: _WHILE @8 num_exp • _COLON _NEW_LINE @9 body
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _COLON       shift, and go to state 86
    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61


State 64

   22 multi_assign_vars: _ID _COMMA _ID •

    $default  reduce using rule 22 (multi_assign_vars)


State 65

   28 function_call: _ID _LPAREN arguments • _RPAREN
   30 arguments: arguments • args

    _NOT       shift, and go to state 31
    _COMMA     shift, and go to state 87
    _LPAREN    shift, and go to state 32
    _RPAREN    shift, and go to state 88
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    args           go to state 89
    num_exp        go to state 90
    exp            go to state 39
    literal        go to state 40


State 66

   19 assign_statement: _ID _ASSIGN num_exp •
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61

    $default  reduce using rule 19 (assign_statement)


State 67

   23 multi_assign_vars: multi_assign_vars _COMMA _ID •

    $default  reduce using rule 23 (multi_assign_vars)


State 68

   24 multi_assign_values: _ASSIGN • num_exp _COMMA num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 91
    exp            go to state 39
    literal        go to state 40


State 69

   21 multi_assign_statement: multi_assign_vars $@1 multi_assign_values •
   25 multi_assign_values: multi_assign_values • _COMMA num_exp

    _COMMA  shift, and go to state 92

    $default  reduce using rule 21 (multi_assign_statement)


State 70

   48 elif_part: elif_part _ELIF • num_exp _COLON _NEW_LINE @6 body

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 93
    exp            go to state 39
    literal        go to state 40


State 71

   68 else_part: _ELSE • _COLON _NEW_LINE @13 body

    _COLON  shift, and go to state 94


State 72

   42 if_statement: if_part elif_part else_part •

    $default  reduce using rule 42 (if_statement)


State 73

   50 while_statement: while_part $@7 else_part •

    $default  reduce using rule 50 (while_statement)


State 74

   65 finally_or_else_part: _ELSE • except_finally_body

    _COLON  shift, and go to state 95

    except_finally_body  go to state 96


State 75

   59 except_part: except_part _EXCEPT • _ID $@11 except_finally_body
   60            | except_part _EXCEPT • except_finally_body

    _COLON  shift, and go to state 95
    _ID     shift, and go to state 97

    except_finally_body  go to state 98


State 76

   64 finally_or_else_part: _FINALLY • except_finally_body

    _COLON  shift, and go to state 95

    except_finally_body  go to state 99


State 77

   54 try_except_statement: try_part except_part finally_or_else_part •

    $default  reduce using rule 54 (try_except_statement)


State 78

   35 function_def: _DEF _ID $@2 _LPAREN • parameters _RPAREN _COLON _NEW_LINE $@3 body

    _ID  shift, and go to state 100

    $default  reduce using rule 36 (parameters)

    parameters              go to state 101
    param_with_default_val  go to state 102


State 79

   45 if_part: _IF $@4 num_exp _COLON • _NEW_LINE @5 body

    _NEW_LINE  shift, and go to state 103


State 80

   80 exp: _LPAREN num_exp _RPAREN •

    $default  reduce using rule 80 (exp)


State 81

   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   73        | num_exp _ADD_SUB_OP num_exp •
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _MUL_DIV_OP  shift, and go to state 59

    $default  reduce using rule 73 (num_exp)


State 82

   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   74        | num_exp _MUL_DIV_OP num_exp •
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    $default  reduce using rule 74 (num_exp)


State 83

   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   75        | num_exp _LOP num_exp •
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _RELOP       shift, and go to state 61

    $default  reduce using rule 75 (num_exp)


State 84

   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp
   76        | num_exp _RELOP num_exp •

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59

    $default  reduce using rule 76 (num_exp)


State 85

   56 try_part: _TRY _COLON _NEW_LINE @10 • body

    _INDENT  shift, and go to state 104

    body  go to state 105


State 86

   53 while_part: _WHILE @8 num_exp _COLON • _NEW_LINE @9 body

    _NEW_LINE  shift, and go to state 106


State 87

   32 args: _COMMA • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 107
    exp            go to state 39
    literal        go to state 40


State 88

   28 function_call: _ID _LPAREN arguments _RPAREN •

    $default  reduce using rule 28 (function_call)


State 89

   30 arguments: arguments args •

    $default  reduce using rule 30 (arguments)


State 90

   31 args: num_exp •
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61

    $default  reduce using rule 31 (args)


State 91

   24 multi_assign_values: _ASSIGN num_exp • _COMMA num_exp
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _COMMA       shift, and go to state 108
    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61


State 92

   25 multi_assign_values: multi_assign_values _COMMA • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 109
    exp            go to state 39
    literal        go to state 40


State 93

   48 elif_part: elif_part _ELIF num_exp • _COLON _NEW_LINE @6 body
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _COLON       shift, and go to state 110
    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61


State 94

   68 else_part: _ELSE _COLON • _NEW_LINE @13 body

    _NEW_LINE  shift, and go to state 111


State 95

   62 except_finally_body: _COLON • _NEW_LINE @12 body

    _NEW_LINE  shift, and go to state 112


State 96

   65 finally_or_else_part: _ELSE except_finally_body •

    $default  reduce using rule 65 (finally_or_else_part)


State 97

   59 except_part: except_part _EXCEPT _ID • $@11 except_finally_body

    $default  reduce using rule 58 ($@11)

    $@11  go to state 113


State 98

   60 except_part: except_part _EXCEPT except_finally_body •

    $default  reduce using rule 60 (except_part)


State 99

   64 finally_or_else_part: _FINALLY except_finally_body •

    $default  reduce using rule 64 (finally_or_else_part)


State 100

   37 parameters: _ID •
   41 param_with_default_val: _ID • _ASSIGN num_exp

    _ASSIGN  shift, and go to state 114

    $default  reduce using rule 37 (parameters)


State 101

   35 function_def: _DEF _ID $@2 _LPAREN parameters • _RPAREN _COLON _NEW_LINE $@3 body
   39 parameters: parameters • _COMMA _ID
   40           | parameters • _COMMA param_with_default_val

    _COMMA   shift, and go to state 115
    _RPAREN  shift, and go to state 116


State 102

   38 parameters: param_with_default_val •

    $default  reduce using rule 38 (parameters)


State 103

   45 if_part: _IF $@4 num_exp _COLON _NEW_LINE • @5 body

    $default  reduce using rule 44 (@5)

    @5  go to state 117


State 104

   70 body: _INDENT • $@14 statement_list _DEDENT

    $default  reduce using rule 69 ($@14)

    $@14  go to state 118


State 105

   56 try_part: _TRY _COLON _NEW_LINE @10 body •

    $default  reduce using rule 56 (try_part)


State 106

   53 while_part: _WHILE @8 num_exp _COLON _NEW_LINE • @9 body

    $default  reduce using rule 52 (@9)

    @9  go to state 119


State 107

   32 args: _COMMA num_exp •
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61

    $default  reduce using rule 32 (args)


State 108

   24 multi_assign_values: _ASSIGN num_exp _COMMA • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 120
    exp            go to state 39
    literal        go to state 40


State 109

   25 multi_assign_values: multi_assign_values _COMMA num_exp •
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61

    $default  reduce using rule 25 (multi_assign_values)


State 110

   48 elif_part: elif_part _ELIF num_exp _COLON • _NEW_LINE @6 body

    _NEW_LINE  shift, and go to state 121


State 111

   68 else_part: _ELSE _COLON _NEW_LINE • @13 body

    $default  reduce using rule 67 (@13)

    @13  go to state 122


State 112

   62 except_finally_body: _COLON _NEW_LINE • @12 body

    $default  reduce using rule 61 (@12)

    @12  go to state 123


State 113

   59 except_part: except_part _EXCEPT _ID $@11 • except_finally_body

    _COLON  shift, and go to state 95

    except_finally_body  go to state 124


State 114

   41 param_with_default_val: _ID _ASSIGN • num_exp

    _NOT       shift, and go to state 31
    _LPAREN    shift, and go to state 32
    _ID        shift, and go to state 33
    _NUM_BOOL  shift, and go to state 34
    _STRING    shift, and go to state 35
    _NONE      shift, and go to state 36

    function_call  go to state 37
    num_exp        go to state 125
    exp            go to state 39
    literal        go to state 40


State 115

   39 parameters: parameters _COMMA • _ID
   40           | parameters _COMMA • param_with_default_val

    _ID  shift, and go to state 126

    param_with_default_val  go to state 127


State 116

   35 function_def: _DEF _ID $@2 _LPAREN parameters _RPAREN • _COLON _NEW_LINE $@3 body

    _COLON  shift, and go to state 128


State 117

   45 if_part: _IF $@4 num_exp _COLON _NEW_LINE @5 • body

    _INDENT  shift, and go to state 104

    body  go to state 129


State 118

   70 body: _INDENT $@14 • statement_list _DEDENT

    _BREAK     shift, and go to state 2
    _CONTINUE  shift, and go to state 3
    _DEF       shift, and go to state 4
    _IF        shift, and go to state 5
    _PASS      shift, and go to state 6
    _RETURN    shift, and go to state 7
    _TRY       shift, and go to state 8
    _WHILE     shift, and go to state 9
    _ID        shift, and go to state 10

    statement_list          go to state 130
    statement               go to state 13
    simple_statement        go to state 14
    compound_statement      go to state 15
    assign_statement        go to state 16
    multi_assign_statement  go to state 17
    multi_assign_vars       go to state 18
    return_statement        go to state 19
    function_call           go to state 20
    function_def            go to state 21
    if_statement            go to state 22
    if_part                 go to state 23
    while_statement         go to state 24
    while_part              go to state 25
    try_except_statement    go to state 26
    try_part                go to state 27


State 119

   53 while_part: _WHILE @8 num_exp _COLON _NEW_LINE @9 • body

    _INDENT  shift, and go to state 104

    body  go to state 131


State 120

   24 multi_assign_values: _ASSIGN num_exp _COMMA num_exp •
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61

    $default  reduce using rule 24 (multi_assign_values)


State 121

   48 elif_part: elif_part _ELIF num_exp _COLON _NEW_LINE • @6 body

    $default  reduce using rule 47 (@6)

    @6  go to state 132


State 122

   68 else_part: _ELSE _COLON _NEW_LINE @13 • body

    _INDENT  shift, and go to state 104

    body  go to state 133


State 123

   62 except_finally_body: _COLON _NEW_LINE @12 • body

    _INDENT  shift, and go to state 104

    body  go to state 134


State 124

   59 except_part: except_part _EXCEPT _ID $@11 except_finally_body •

    $default  reduce using rule 59 (except_part)


State 125

   41 param_with_default_val: _ID _ASSIGN num_exp •
   73 num_exp: num_exp • _ADD_SUB_OP num_exp
   74        | num_exp • _MUL_DIV_OP num_exp
   75        | num_exp • _LOP num_exp
   76        | num_exp • _RELOP num_exp

    _ADD_SUB_OP  shift, and go to state 58
    _MUL_DIV_OP  shift, and go to state 59
    _LOP         shift, and go to state 60
    _RELOP       shift, and go to state 61

    $default  reduce using rule 41 (param_with_default_val)


State 126

   39 parameters: parameters _COMMA _ID •
   41 param_with_default_val: _ID • _ASSIGN num_exp

    _ASSIGN  shift, and go to state 114

    $default  reduce using rule 39 (parameters)


State 127

   40 parameters: parameters _COMMA param_with_default_val •

    $default  reduce using rule 40 (parameters)


State 128

   35 function_def: _DEF _ID $@2 _LPAREN parameters _RPAREN _COLON • _NEW_LINE $@3 body

    _NEW_LINE  shift, and go to state 135


State 129

   45 if_part: _IF $@4 num_exp _COLON _NEW_LINE @5 body •

    $default  reduce using rule 45 (if_part)


State 130

    5 statement_list: statement_list • statement
   70 body: _INDENT $@14 statement_list • _DEDENT

    _DEDENT    shift, and go to state 136
    _BREAK     shift, and go to state 2
    _CONTINUE  shift, and go to state 3
    _DEF       shift, and go to state 4
    _IF        shift, and go to state 5
    _PASS      shift, and go to state 6
    _RETURN    shift, and go to state 7
    _TRY       shift, and go to state 8
    _WHILE     shift, and go to state 9
    _ID        shift, and go to state 10

    statement               go to state 47
    simple_statement        go to state 14
    compound_statement      go to state 15
    assign_statement        go to state 16
    multi_assign_statement  go to state 17
    multi_assign_vars       go to state 18
    return_statement        go to state 19
    function_call           go to state 20
    function_def            go to state 21
    if_statement            go to state 22
    if_part                 go to state 23
    while_statement         go to state 24
    while_part              go to state 25
    try_except_statement    go to state 26
    try_part                go to state 27


State 131

   53 while_part: _WHILE @8 num_exp _COLON _NEW_LINE @9 body •

    $default  reduce using rule 53 (while_part)


State 132

   48 elif_part: elif_part _ELIF num_exp _COLON _NEW_LINE @6 • body

    _INDENT  shift, and go to state 104

    body  go to state 137


State 133

   68 else_part: _ELSE _COLON _NEW_LINE @13 body •

    $default  reduce using rule 68 (else_part)


State 134

   62 except_finally_body: _COLON _NEW_LINE @12 body •

    $default  reduce using rule 62 (except_finally_body)


State 135

   35 function_def: _DEF _ID $@2 _LPAREN parameters _RPAREN _COLON _NEW_LINE • $@3 body

    $default  reduce using rule 34 ($@3)

    $@3  go to state 138


State 136

   70 body: _INDENT $@14 statement_list _DEDENT •

    $default  reduce using rule 70 (body)


State 137

   48 elif_part: elif_part _ELIF num_exp _COLON _NEW_LINE @6 body •

    $default  reduce using rule 48 (elif_part)


State 138

   35 function_def: _DEF _ID $@2 _LPAREN parameters _RPAREN _COLON _NEW_LINE $@3 • body

    _INDENT  shift, and go to state 104

    body  go to state 139


State 139

   35 function_def: _DEF _ID $@2 _LPAREN parameters _RPAREN _COLON _NEW_LINE $@3 body •

    $default  reduce using rule 35 (function_def)
